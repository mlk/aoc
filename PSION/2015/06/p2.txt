
PROC part2:
	global pcell&, size&
	local w&, t&, phandle%, txt$(100), curcmd$(7), error%, sidx%, txtlen%, curNum$(4), sx&, sy&, ex&, ey&, mode%

	alert(gen$(w&, 1))
	
	font &8, 1
		
	w& = 1000
	t& = 999
	size& = w& * w&
	
	pcell& = ALLOC(size&)
	if pcell& = 0
		raise 0
	endif
	
	clear:

  error% = IOopen(phandle%, "d:\2015\06\input.txt", $0020)
	if error% < 0
		raise error%
	endif

	print "Parsing"
	while 1
		error% = ioread(phandle%, addr(txt$) + 1, 100)
		if error% < 0
			if error% <> -36
				raise error%				
			endif
			break
		endif
		pokeb addr(txt$), error%
		rem print txt$

		curcmd$ = mid$(txt$, 1, 7)
		if curcmd$ = "toggle "
			sidx% = 8
			mode% = 2
		elseif curcmd$ = "turn on"
			sidx% = 9
			mode% = 1
		else
			sidx% = 10	
			mode% = -1
		endif
		txtlen% = len(txt$)
		curNum$ = parseNextNumber$:(txt$, sIdx%, txtlen%)
		sx& = val(curNum$)
		sidx% = sidx% + len(curNum$) + 1
		curNum$ = parseNextNumber$:(txt$, sIdx%, txtlen%)
		sy& = val(curNum$)
		sidx% = sidx% + len(curnum$) + 9
		curNum$ = parseNextNumber$:(txt$, sIdx%, txtlen%)
		ex& = val(curNum$)
		sidx% = sidx% + len(curNum$) + 1
		curNum$ = parseNextNumber$:(txt$, sIdx%, txtlen%)
		ey& = val(curNum$)
			
		setSquare:(sx&, sy&, ex&, ey&, mode%)
	endwh

	w& = count&:
	print w&
	print w&
	
	alert(gen$(w&, 1))
	
	freealloc pcell&
	GET

	GET

ENDP

proc clear:
	local idx&
	print "Clearing..."
	while idx& <= size&
		pokeb pcell& + idx&, &0
		idx& = idx& + 1
	endwh
endp

proc count&:
	local x%, y%, counter&

	print "Counting..."

	while x% < 1000
		while y% < 1000
		 	counter& = counter& + PEEKB(pcell& + x% * 1000 + y%)

			y% = y% + 1
		endwh
	
		x% = x% + 1
	endwh
	
	return counter&
endp 

proc setSquare:(xs&, ys&, xe&, ye&, data%)
	local xi&, yi&, curVal%
	xi& = xs&
	while xi& <= xe&
		yi& = ys&
		while yi& <= ye&
		 	curVal% = PEEKB(pcell& + xi& * 1000 + yi&) + data%
			if curVal% >= 0 AND curVal% <= 255
					POKEB pcell& + (xi& * 1000) + yi&, curVal%
				elseif curVal% > 255
					print data%;
					print " "
					print curVal%
			endif
			yi& = yi& + 1
		endwh
		xi& = xi& + 1
	endwh
endp

proc set:(x&, y&, data%)
 	POKEB pcell& + x& * 1000 + y&, data%
endp


proc get%:(x&, y&)
	return PEEKB(pcell& + x& * 1000 + y&)
endp

proc parseNextNumber$:(txt$, start%, strlen%)
	return mid$(txt$, start%, strindexof%:(txt$, ",", " ", start%, strlen%) - start%)
endp

PROC strindexof%:(txt$, ch1$, ch2$, start%, slen%)
	local mcur$(1), l%, didx%
	l% = 1

	didx% = start%
	do
		mcur$ = mid$(txt$, didx%, l%)
		
		if mcur$ = ch1$
			return didx%
		elseif mcur$ = ch2$
			return didx%
		endif
		didx% = didx% + 1
	until didx% = slen% + 1
	
	return slen% + 1
ENDP


